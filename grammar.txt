LAYERS -> LAYER LAYERS
LAYERS -> LAYER

STMTS -> STMT STMTS
STMTS -> STMT

STMT -> EXPR;
STMT -> INIT_VAR_WITH_TYPE_STMT;
STMT -> INIT_ARR_WITH_TYPE_STMT;
STMT -> INIT_STRUCT_WITH_TYPE_STMT;
STMT -> INIT_FUNC_WITH_TYPE_STMT;
STMT -> OUTPUT_STMT;
STMT -> LOOP_STMT
STMT -> IF_STMT
STMT -> RET_STMT;

INIT_VAR_WITH_TYPE_STMT -> NAME : VAR_TYPE = EXPR
INIT_VAR_WITH_TYPE_STMT -> NAME : VAR_TYPE
VAR_TYPE -> VAR_BUILTIN_TYPE | VAR_TYPE_WITH_BIT_SIZE
VAR_BUILTIN_TYPE -> int | double | char | float | int(NUM)


INIT_ARR_WITH_TYPE_STMT -> NAME : ARR_TYPE = ARR_DEF
INIT_ARR_WITH_TYPE_STMT -> NAME : ARR_TYPE

ARR_TYPE -> VAR_BUILTIN_TYPE[NUM] | vector<VAR_BUILTIN_TYPE, NUM> | STRUCT_TYPE[NUM] | FUNC_TYPE

ARR_DEF -> repeat(ANY_DEF, NUM)

ARR_DEF -> {ARR_ANY_DEF_SEQ}
ARR_ANY_DEF_SEQ -> FUNC_DEF ((, FUNC_DEF ))*
ARR_ANY_DEF_SEQ -> STRUCT_DEF ((, STRUCT_DEF))*
ARR_ANY_DEF_SEQ -> ARR_DEF (( , ARR_DEF ))*
ARR_ANY_DEF_SEQ -> EXPR (( , EXPR))*

ARR_DEF -> input(NUM..NUM) : VAR_BUILTIN_TYPE[NUM]

INIT_STRUCT_WITH_TYPE_STMT -> NAME : STRUCT_TYPE = STRUCT_DEF

STRUCT_TYPE -> { FIELDS_SEQ }
FIELDS_SEQ -> FIELD, FIELDS_SEQ
FIELDS_SEQ -> FIELD
FIELD -> NAME : (( VAR_BUILTIN_TYPE | ARR_TYPE | STRUCT_TYPE | ARGS | ARGS_WITH_TYPE ))

STRUCT_DEF -> glue(ANY_DEF_OR_BIND_SEQ)
ANY_DEF_OR_BIND_SEQ -> ANY_DEF_OR_BIND, ANY_DEF_OR_BIND_SEQ
ANY_DEF_OR_BIND_SEQ -> ANY_DEF_OR_BIND
ANY_DEF_OR_BIND -> ANY_DEF | bind(NAME, EXPR_SEQ)

STRUCT_DEF -> glue(NAME_EXPR_SEQ)
NAME_EXPR_SEQ -> NAME_EXPR, NAME_EXPR_SEQ
NAME_EXPR_SEQ -> NAME_EXPR
NAME_EXPR -> NAME : NAME

INIT_FUNC_WITH_TYPE_STMT -> NAME : FUNC_TYPE = FUNC_DEF

FUNC_TYPE -> ARGS
FUNC_TYPE -> ARGS_WITH_TYPES
FUNC_TYPE -> ARGS : ANY_TYPE
FUNC_TYPE -> ARGS_WITH_TYPES : ANY_TYPE
ARGS -> (NAMES_SEQ)
ARGS_WITH_TYPES -> (NAME_TYPE_SEQ) // smth like fields_seq

FUNC_DEF -> {STMTS}
FUNC_DEF -> bind(EXPR ((, EXPR))* )
FUNC_DEF -> EXPR;

OUTPUT_STMT = output(NUM, NAME)

LOOP_STMT -> FOR_LOOP
LOOP_STMT -> WHILE_LOOP

FOR_LOOP -> for(NAME in RANGE) LOOP_IF_BODY
FOR_LOOP -> for(NAME in NAME) LOOP_IF_BODY

LOOP_IF_BODY -> { STMTS }
LOOP_IF_BODY -> STMT

WHILE_LOOP -> while(EXPR) LOOP_IF_BODY

IF_STMT -> if(EXPR) LOOP_IF_BODY else LOOP_IF_BODY
IF_STMT -> if(EXPR) LOOP_IF_BODY


//SIMPLE_NAMED_TERM -> (( NAME( (( EXPR ))* ) || NAME)) (([NUM]))*
//NAMED_TERM ->  SIMPLE_NAMED_TERM  ((.  SIMPLE_NAMED_TERM ))*

EXPR -> EXPR = EXPR || OR_EXPR
OR_EXPR -> OR_EXPR '||' OR_EXPR || AND_EXPR
AND_EXPR -> AND_EXPR && AND_EXPR || EQUALITY_EXPR
EQUALITY_EXPR -> EQUALITY_EXPR == EQUALITY_EXPR || EQUALITY_EXPR != EQUALITY_EXPR || LESS_OR_GREATER_EXPR
LESS_OR_GREATER_EXPR -> LESS_OR_GREATER_EXPR > LESS_OR_GREATER_EXPR || LESS_OR_GREATER_EXPR < LESS_OR_GREATER_EXPR 
|| LESS_OR_GREATER_EXPR >= LESS_OR_GREATER_EXPR || LESS_OR_GREATER_EXPR <= LESS_OR_GREATER_EXPR || ADD_OR_MINUS_EXPR 
ADD_OR_MINUS_EXPR -> ADD_OR_MINUS_EXPR + ADD_OR_MINUS_EXPR || ADD_OR_MINUS_EXPR - ADD_OR_MINUS_EXPR || MULT
MULT -> MULT * MULT || MULT \ MULT || NOT_EXPR
NOT_EXPR -> !NOT_EXPR || DOT_OR_SQUARES_EXPR
DOT_OR_BRAKET_EXPR -> DOT_OR_BRAKET_EXPR.DOT_OR_BRAKET_EXPR || DOT_OR_BRAKET_EXPR(OR_EXPR? ((, OR_EXPR))* ) || DOT_OR_BRAKET_EXPR[OR_EXPR] || TERM

TERM -> NUM 
| NAMED_TERM
| input(0)
| ( OR_EXPR )
